/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AudioSample } from "./AudioSample";
import { AudioSampleCountArgs } from "./AudioSampleCountArgs";
import { AudioSampleFindManyArgs } from "./AudioSampleFindManyArgs";
import { AudioSampleFindUniqueArgs } from "./AudioSampleFindUniqueArgs";
import { CreateAudioSampleArgs } from "./CreateAudioSampleArgs";
import { UpdateAudioSampleArgs } from "./UpdateAudioSampleArgs";
import { DeleteAudioSampleArgs } from "./DeleteAudioSampleArgs";
import { User } from "../../user/base/User";
import { AudioSampleService } from "../audioSample.service";
@graphql.Resolver(() => AudioSample)
export class AudioSampleResolverBase {
  constructor(protected readonly service: AudioSampleService) {}

  async _audioSamplesMeta(
    @graphql.Args() args: AudioSampleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AudioSample])
  async audioSamples(
    @graphql.Args() args: AudioSampleFindManyArgs
  ): Promise<AudioSample[]> {
    return this.service.audioSamples(args);
  }

  @graphql.Query(() => AudioSample, { nullable: true })
  async audioSample(
    @graphql.Args() args: AudioSampleFindUniqueArgs
  ): Promise<AudioSample | null> {
    const result = await this.service.audioSample(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AudioSample)
  async createAudioSample(
    @graphql.Args() args: CreateAudioSampleArgs
  ): Promise<AudioSample> {
    return await this.service.createAudioSample({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => AudioSample)
  async updateAudioSample(
    @graphql.Args() args: UpdateAudioSampleArgs
  ): Promise<AudioSample | null> {
    try {
      return await this.service.updateAudioSample({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AudioSample)
  async deleteAudioSample(
    @graphql.Args() args: DeleteAudioSampleArgs
  ): Promise<AudioSample | null> {
    try {
      return await this.service.deleteAudioSample(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: AudioSample): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
