/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AudioSampleService } from "../audioSample.service";
import { AudioSampleCreateInput } from "./AudioSampleCreateInput";
import { AudioSample } from "./AudioSample";
import { AudioSampleFindManyArgs } from "./AudioSampleFindManyArgs";
import { AudioSampleWhereUniqueInput } from "./AudioSampleWhereUniqueInput";
import { AudioSampleUpdateInput } from "./AudioSampleUpdateInput";

export class AudioSampleControllerBase {
  constructor(protected readonly service: AudioSampleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AudioSample })
  async createAudioSample(
    @common.Body() data: AudioSampleCreateInput
  ): Promise<AudioSample> {
    return await this.service.createAudioSample({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        filePath: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AudioSample] })
  @ApiNestedQuery(AudioSampleFindManyArgs)
  async audioSamples(@common.Req() request: Request): Promise<AudioSample[]> {
    const args = plainToClass(AudioSampleFindManyArgs, request.query);
    return this.service.audioSamples({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        filePath: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AudioSample })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async audioSample(
    @common.Param() params: AudioSampleWhereUniqueInput
  ): Promise<AudioSample | null> {
    const result = await this.service.audioSample({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        filePath: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AudioSample })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAudioSample(
    @common.Param() params: AudioSampleWhereUniqueInput,
    @common.Body() data: AudioSampleUpdateInput
  ): Promise<AudioSample | null> {
    try {
      return await this.service.updateAudioSample({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          filePath: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AudioSample })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAudioSample(
    @common.Param() params: AudioSampleWhereUniqueInput
  ): Promise<AudioSample | null> {
    try {
      return await this.service.deleteAudioSample({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          filePath: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
