/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AudioSample as PrismaAudioSample,
  User as PrismaUser,
} from "@prisma/client";

export class AudioSampleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AudioSampleCountArgs, "select">
  ): Promise<number> {
    return this.prisma.audioSample.count(args);
  }

  async audioSamples(
    args: Prisma.AudioSampleFindManyArgs
  ): Promise<PrismaAudioSample[]> {
    return this.prisma.audioSample.findMany(args);
  }
  async audioSample(
    args: Prisma.AudioSampleFindUniqueArgs
  ): Promise<PrismaAudioSample | null> {
    return this.prisma.audioSample.findUnique(args);
  }
  async createAudioSample(
    args: Prisma.AudioSampleCreateArgs
  ): Promise<PrismaAudioSample> {
    return this.prisma.audioSample.create(args);
  }
  async updateAudioSample(
    args: Prisma.AudioSampleUpdateArgs
  ): Promise<PrismaAudioSample> {
    return this.prisma.audioSample.update(args);
  }
  async deleteAudioSample(
    args: Prisma.AudioSampleDeleteArgs
  ): Promise<PrismaAudioSample> {
    return this.prisma.audioSample.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.audioSample
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
