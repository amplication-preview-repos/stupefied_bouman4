/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DetectedMusicService } from "../detectedMusic.service";
import { DetectedMusicCreateInput } from "./DetectedMusicCreateInput";
import { DetectedMusic } from "./DetectedMusic";
import { DetectedMusicFindManyArgs } from "./DetectedMusicFindManyArgs";
import { DetectedMusicWhereUniqueInput } from "./DetectedMusicWhereUniqueInput";
import { DetectedMusicUpdateInput } from "./DetectedMusicUpdateInput";
import { DetectionLogFindManyArgs } from "../../detectionLog/base/DetectionLogFindManyArgs";
import { DetectionLog } from "../../detectionLog/base/DetectionLog";
import { DetectionLogWhereUniqueInput } from "../../detectionLog/base/DetectionLogWhereUniqueInput";

export class DetectedMusicControllerBase {
  constructor(protected readonly service: DetectedMusicService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DetectedMusic })
  async createDetectedMusic(
    @common.Body() data: DetectedMusicCreateInput
  ): Promise<DetectedMusic> {
    return await this.service.createDetectedMusic({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        artist: true,
        duration: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DetectedMusic] })
  @ApiNestedQuery(DetectedMusicFindManyArgs)
  async detectedMusics(
    @common.Req() request: Request
  ): Promise<DetectedMusic[]> {
    const args = plainToClass(DetectedMusicFindManyArgs, request.query);
    return this.service.detectedMusics({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        artist: true,
        duration: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DetectedMusic })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async detectedMusic(
    @common.Param() params: DetectedMusicWhereUniqueInput
  ): Promise<DetectedMusic | null> {
    const result = await this.service.detectedMusic({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        artist: true,
        duration: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DetectedMusic })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDetectedMusic(
    @common.Param() params: DetectedMusicWhereUniqueInput,
    @common.Body() data: DetectedMusicUpdateInput
  ): Promise<DetectedMusic | null> {
    try {
      return await this.service.updateDetectedMusic({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          artist: true,
          duration: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DetectedMusic })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDetectedMusic(
    @common.Param() params: DetectedMusicWhereUniqueInput
  ): Promise<DetectedMusic | null> {
    try {
      return await this.service.deleteDetectedMusic({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          artist: true,
          duration: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/detectionLogs")
  @ApiNestedQuery(DetectionLogFindManyArgs)
  async findDetectionLogs(
    @common.Req() request: Request,
    @common.Param() params: DetectedMusicWhereUniqueInput
  ): Promise<DetectionLog[]> {
    const query = plainToClass(DetectionLogFindManyArgs, request.query);
    const results = await this.service.findDetectionLogs(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        timestamp: true,

        user: {
          select: {
            id: true,
          },
        },

        detectedMusic: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/detectionLogs")
  async connectDetectionLogs(
    @common.Param() params: DetectedMusicWhereUniqueInput,
    @common.Body() body: DetectionLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      detectionLogs: {
        connect: body,
      },
    };
    await this.service.updateDetectedMusic({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/detectionLogs")
  async updateDetectionLogs(
    @common.Param() params: DetectedMusicWhereUniqueInput,
    @common.Body() body: DetectionLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      detectionLogs: {
        set: body,
      },
    };
    await this.service.updateDetectedMusic({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/detectionLogs")
  async disconnectDetectionLogs(
    @common.Param() params: DetectedMusicWhereUniqueInput,
    @common.Body() body: DetectionLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      detectionLogs: {
        disconnect: body,
      },
    };
    await this.service.updateDetectedMusic({
      where: params,
      data,
      select: { id: true },
    });
  }
}
