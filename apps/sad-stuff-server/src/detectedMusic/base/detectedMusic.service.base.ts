/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DetectedMusic as PrismaDetectedMusic,
  DetectionLog as PrismaDetectionLog,
} from "@prisma/client";

export class DetectedMusicServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DetectedMusicCountArgs, "select">
  ): Promise<number> {
    return this.prisma.detectedMusic.count(args);
  }

  async detectedMusics(
    args: Prisma.DetectedMusicFindManyArgs
  ): Promise<PrismaDetectedMusic[]> {
    return this.prisma.detectedMusic.findMany(args);
  }
  async detectedMusic(
    args: Prisma.DetectedMusicFindUniqueArgs
  ): Promise<PrismaDetectedMusic | null> {
    return this.prisma.detectedMusic.findUnique(args);
  }
  async createDetectedMusic(
    args: Prisma.DetectedMusicCreateArgs
  ): Promise<PrismaDetectedMusic> {
    return this.prisma.detectedMusic.create(args);
  }
  async updateDetectedMusic(
    args: Prisma.DetectedMusicUpdateArgs
  ): Promise<PrismaDetectedMusic> {
    return this.prisma.detectedMusic.update(args);
  }
  async deleteDetectedMusic(
    args: Prisma.DetectedMusicDeleteArgs
  ): Promise<PrismaDetectedMusic> {
    return this.prisma.detectedMusic.delete(args);
  }

  async findDetectionLogs(
    parentId: string,
    args: Prisma.DetectionLogFindManyArgs
  ): Promise<PrismaDetectionLog[]> {
    return this.prisma.detectedMusic
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .detectionLogs(args);
  }
}
