/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DetectionLog as PrismaDetectionLog,
  User as PrismaUser,
  DetectedMusic as PrismaDetectedMusic,
} from "@prisma/client";

export class DetectionLogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DetectionLogCountArgs, "select">
  ): Promise<number> {
    return this.prisma.detectionLog.count(args);
  }

  async detectionLogs(
    args: Prisma.DetectionLogFindManyArgs
  ): Promise<PrismaDetectionLog[]> {
    return this.prisma.detectionLog.findMany(args);
  }
  async detectionLog(
    args: Prisma.DetectionLogFindUniqueArgs
  ): Promise<PrismaDetectionLog | null> {
    return this.prisma.detectionLog.findUnique(args);
  }
  async createDetectionLog(
    args: Prisma.DetectionLogCreateArgs
  ): Promise<PrismaDetectionLog> {
    return this.prisma.detectionLog.create(args);
  }
  async updateDetectionLog(
    args: Prisma.DetectionLogUpdateArgs
  ): Promise<PrismaDetectionLog> {
    return this.prisma.detectionLog.update(args);
  }
  async deleteDetectionLog(
    args: Prisma.DetectionLogDeleteArgs
  ): Promise<PrismaDetectionLog> {
    return this.prisma.detectionLog.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.detectionLog
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }

  async getDetectedMusic(
    parentId: string
  ): Promise<PrismaDetectedMusic | null> {
    return this.prisma.detectionLog
      .findUnique({
        where: { id: parentId },
      })
      .detectedMusic();
  }
}
