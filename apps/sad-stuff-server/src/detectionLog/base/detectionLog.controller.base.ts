/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DetectionLogService } from "../detectionLog.service";
import { DetectionLogCreateInput } from "./DetectionLogCreateInput";
import { DetectionLog } from "./DetectionLog";
import { DetectionLogFindManyArgs } from "./DetectionLogFindManyArgs";
import { DetectionLogWhereUniqueInput } from "./DetectionLogWhereUniqueInput";
import { DetectionLogUpdateInput } from "./DetectionLogUpdateInput";

export class DetectionLogControllerBase {
  constructor(protected readonly service: DetectionLogService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DetectionLog })
  async createDetectionLog(
    @common.Body() data: DetectionLogCreateInput
  ): Promise<DetectionLog> {
    return await this.service.createDetectionLog({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,

        detectedMusic: data.detectedMusic
          ? {
              connect: data.detectedMusic,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        timestamp: true,

        user: {
          select: {
            id: true,
          },
        },

        detectedMusic: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DetectionLog] })
  @ApiNestedQuery(DetectionLogFindManyArgs)
  async detectionLogs(@common.Req() request: Request): Promise<DetectionLog[]> {
    const args = plainToClass(DetectionLogFindManyArgs, request.query);
    return this.service.detectionLogs({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        timestamp: true,

        user: {
          select: {
            id: true,
          },
        },

        detectedMusic: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DetectionLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async detectionLog(
    @common.Param() params: DetectionLogWhereUniqueInput
  ): Promise<DetectionLog | null> {
    const result = await this.service.detectionLog({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        timestamp: true,

        user: {
          select: {
            id: true,
          },
        },

        detectedMusic: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DetectionLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDetectionLog(
    @common.Param() params: DetectionLogWhereUniqueInput,
    @common.Body() data: DetectionLogUpdateInput
  ): Promise<DetectionLog | null> {
    try {
      return await this.service.updateDetectionLog({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,

          detectedMusic: data.detectedMusic
            ? {
                connect: data.detectedMusic,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          timestamp: true,

          user: {
            select: {
              id: true,
            },
          },

          detectedMusic: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DetectionLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDetectionLog(
    @common.Param() params: DetectionLogWhereUniqueInput
  ): Promise<DetectionLog | null> {
    try {
      return await this.service.deleteDetectionLog({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          timestamp: true,

          user: {
            select: {
              id: true,
            },
          },

          detectedMusic: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
