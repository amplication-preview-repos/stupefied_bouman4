/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DetectionLog } from "./DetectionLog";
import { DetectionLogCountArgs } from "./DetectionLogCountArgs";
import { DetectionLogFindManyArgs } from "./DetectionLogFindManyArgs";
import { DetectionLogFindUniqueArgs } from "./DetectionLogFindUniqueArgs";
import { CreateDetectionLogArgs } from "./CreateDetectionLogArgs";
import { UpdateDetectionLogArgs } from "./UpdateDetectionLogArgs";
import { DeleteDetectionLogArgs } from "./DeleteDetectionLogArgs";
import { User } from "../../user/base/User";
import { DetectedMusic } from "../../detectedMusic/base/DetectedMusic";
import { DetectionLogService } from "../detectionLog.service";
@graphql.Resolver(() => DetectionLog)
export class DetectionLogResolverBase {
  constructor(protected readonly service: DetectionLogService) {}

  async _detectionLogsMeta(
    @graphql.Args() args: DetectionLogCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DetectionLog])
  async detectionLogs(
    @graphql.Args() args: DetectionLogFindManyArgs
  ): Promise<DetectionLog[]> {
    return this.service.detectionLogs(args);
  }

  @graphql.Query(() => DetectionLog, { nullable: true })
  async detectionLog(
    @graphql.Args() args: DetectionLogFindUniqueArgs
  ): Promise<DetectionLog | null> {
    const result = await this.service.detectionLog(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DetectionLog)
  async createDetectionLog(
    @graphql.Args() args: CreateDetectionLogArgs
  ): Promise<DetectionLog> {
    return await this.service.createDetectionLog({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,

        detectedMusic: args.data.detectedMusic
          ? {
              connect: args.data.detectedMusic,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => DetectionLog)
  async updateDetectionLog(
    @graphql.Args() args: UpdateDetectionLogArgs
  ): Promise<DetectionLog | null> {
    try {
      return await this.service.updateDetectionLog({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,

          detectedMusic: args.data.detectedMusic
            ? {
                connect: args.data.detectedMusic,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DetectionLog)
  async deleteDetectionLog(
    @graphql.Args() args: DeleteDetectionLogArgs
  ): Promise<DetectionLog | null> {
    try {
      return await this.service.deleteDetectionLog(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: DetectionLog): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => DetectedMusic, {
    nullable: true,
    name: "detectedMusic",
  })
  async getDetectedMusic(
    @graphql.Parent() parent: DetectionLog
  ): Promise<DetectedMusic | null> {
    const result = await this.service.getDetectedMusic(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
